{"version":3,"sources":["components/heroesListItem/HeroesListItem.js","components/spinner/Spinner.js","components/heroesList/HeroesList.js","hooks/http.hook.js","actions/actions.js","components/heroesAddForm/HeroesAddForm.js","components/heroesFilters/HeroesFilters.js","components/app/App.js","reducers/reducers.js","store/store.js","index.js"],"names":["HeroesListItem","elementClassName","name","description","element","className","src","alt","style","type","aria-label","Spinner","role","HeroesList","useSelector","state","heroes","heroesLoadingStatus","dispatch","useDispatch","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","useEffect","then","payload","heroesFetched","catch","arr","length","map","id","props","HeroesAddForm","htmlFor","required","placeholder","value","HeroesFilters","App","initialState","filters","reducer","action","store","createStore","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.66c8f787.chunk.js","sourcesContent":["\nconst HeroesListItem = ({name, description, element}) => {\n\n    let elementClassName;\n\n    switch (element) {\n        case 'fire':\n            elementClassName = 'bg-danger bg-gradient';\n            break;\n        case 'water':\n            elementClassName = 'bg-primary bg-gradient';\n            break;\n        case 'wind':\n            elementClassName = 'bg-success bg-gradient';\n            break;\n        case 'earth':\n            elementClassName = 'bg-secondary bg-gradient';\n            break;\n        default:\n            elementClassName = 'bg-warning bg-gradient';\n    }\n\n    return (\n        <li \n            className={`card flex-row mb-4 shadow-lg text-white ${elementClassName}`}>\n            <img src=\"http://www.stpaulsteinbach.org/wp-content/uploads/2014/09/unknown-hero.jpg\" \n                 className=\"img-fluid w-25 d-inline\" \n                 alt=\"unknown hero\" \n                 style={{'objectFit': 'cover'}}/>\n            <div className=\"card-body\">\n                \n                <h3 className=\"card-title\">Имя героя</h3>\n                <p className=\"card-text\">Описание</p>\n            </div>\n            <span className=\"position-absolute top-0 start-100 translate-middle badge border rounded-pill bg-light\">\n                <button type=\"button\" className=\"btn-close btn-close\" aria-label=\"Close\"></button>\n            </span>\n        </li>\n    )\n}\n\nexport default HeroesListItem;","\nconst Spinner = () => {\n    return (\n        <div className=\"spinner-border mx-auto mt-5\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </div>\n    )\n}\n\nexport default Spinner;","import {useHttp} from '../../hooks/http.hook';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {heroesFetching, heroesFetched, heroesFetchingError} from '../../actions/actions';\n\n\n\nimport HeroesListItem from \"../heroesListItem/HeroesListItem\";\nimport Spinner from '../spinner/Spinner';\n\n// Задача для этого компонента:\n// При клике на \"крестик\" идет удаление персонажа из общего состояния\n// Усложненная задача:\n// Удаление идет и с json файла при помощи метода DELETE\n\nconst HeroesList = () => {\n    const { heroes, heroesLoadingStatus} = useSelector(state => state);\n    const dispatch = useDispatch();\n\n    const {request} = useHttp();\n\n    useEffect(() => {\n        dispatch(heroesFetching());\n        request(\"http://localhost:3001/heroes\")\n            .then(data => dispatch(heroesFetched(data)))\n            .catch(() => dispatch(heroesFetchingError()))\n\n        // eslint-disable-next-line\n    }, []);\n\n    if (heroesLoadingStatus === \"loading\") {\n        return <Spinner/>;\n    } else if (heroesLoadingStatus === \"error\") {\n        return <h5 className=\"text-center mt-5\">Ошибка загрузки</h5>\n    }\n\n    const renderHeroesList = (arr) => {\n        if (arr.length === 0) {\n            return <h5 className=\"text-center mt-5\">Героев пока нет</h5>\n        }\n\n        return arr.map(({id, ...props}) => {\n            return <HeroesListItem key={id} {...props}/>\n        })\n    }\n\n    const elements = renderHeroesList(heroes);\n    return (\n        <ul>\n         \n           < HeroesListItem/>\n           < HeroesListItem/>\n           < HeroesListItem/>\n            {/* {elements} */}\n        </ul>\n    )\n}\n\nexport default HeroesList;","import { useCallback } from \"react\";\n\nexport const useHttp = () => {\n    // const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        // setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(e) {\n            // setProcess('error');\n            throw e;\n        }\n    }, []);\n\n    // const clearError = useCallback(() => {\n        // setProcess('loading');\n    // }, []);\n\n    return {request, \n            // clearError, \n            // process, \n            // setProcess\n        }\n}","export const heroesFetching = () => {\r\n    return {\r\n        type: 'HEROES_FETCHING'\r\n    }\r\n}\r\n\r\nexport const heroesFetched = (heroes) => {\r\n    return {\r\n        type: 'HEROES_FETCHED',\r\n        payload: heroes\r\n    }\r\n}\r\n\r\nexport const heroesFetchingError = () => {\r\n    return {\r\n        type: 'HEROES_FETCHING_ERROR'\r\n    }\r\n}","\n\n// Задача для этого компонента:\n// Реализовать создание нового героя с введенными данными. Он должен попадать\n// в общее состояние и отображаться в списке + фильтроваться\n// Уникальный идентификатор персонажа можно сгенерировать через uiid\n// Усложненная задача:\n// Персонаж создается и в файле json при помощи метода POST\n// Дополнительно:\n// Элементы <option></option> желательно сформировать на базе\n// данных из фильтров\n\nconst HeroesAddForm = () => {\n    return (\n        <form className=\"border p-4 shadow-lg rounded\">\n            <div className=\"mb-3\">\n                <label htmlFor=\"name\" className=\"form-label fs-4\">Имя нового героя</label>\n                <input \n                    required\n                    type=\"text\" \n                    name=\"name\" \n                    className=\"form-control\" \n                    id=\"name\" \n                    placeholder=\"Как меня зовут?\"/>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"text\" className=\"form-label fs-4\">Описание</label>\n                <textarea\n                    required\n                    name=\"text\" \n                    className=\"form-control\" \n                    id=\"text\" \n                    placeholder=\"Что я умею?\"\n                    style={{\"height\": '130px'}}/>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"element\" className=\"form-label\">Выбрать элемент героя</label>\n                <select \n                    required\n                    className=\"form-select\" \n                    id=\"element\" \n                    name=\"element\">\n                    <option >Я владею элементом...</option>\n                    <option value=\"fire\">Огонь</option>\n                    <option value=\"water\">Вода</option>\n                    <option value=\"wind\">Ветер</option>\n                    <option value=\"earth\">Земля</option>\n                </select>\n            </div>\n\n            <button type=\"submit\" className=\"btn btn-primary\">Создать</button>\n        </form>\n    )\n}\n\nexport default HeroesAddForm;","\n// Задача для этого компонента:\n// Фильтры должны формироваться на основании загруженных данных\n// Фильтры должны отображать только нужных героев при выборе\n// Активный фильтр имеет класс active\n// Изменять json-файл для удобства МОЖНО!\n// Представьте, что вы попросили бэкенд-разработчика об этом\n\nconst HeroesFilters = () => {\n    return (\n        <div className=\"card shadow-lg mt-4\">\n            <div className=\"card-body\">\n                <p className=\"card-text\">Отфильтруйте героев по элементам</p>\n                <div className=\"btn-group\">\n                    <button className=\"btn btn-outline-dark active\">Все</button>\n                    <button className=\"btn btn-danger\">Огонь</button>\n                    <button className=\"btn btn-primary\">Вода</button>\n                    <button className=\"btn btn-success\">Ветер</button>\n                    <button className=\"btn btn-secondary\">Земля</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default HeroesFilters;","import HeroesList from '../heroesList/HeroesList';\nimport HeroesAddForm from '../heroesAddForm/HeroesAddForm';\nimport HeroesFilters from '../heroesFilters/HeroesFilters';\n\nimport './app.scss';\n\nconst App = () => {\n    \n    return (\n        <main className=\"app\">\n            <div className=\"content\">\n                <HeroesList/>\n                <div className=\"content__interactive\">\n                    <HeroesAddForm/>\n                    <HeroesFilters/>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default App;","const initialState = {\r\n    heroes: [],\r\n    heroesLoadingStatus: 'idle',\r\n    filters: []\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'HEROES_FETCHING':\r\n            return {\r\n                ...state,\r\n                heroesLoadingStatus: 'loading'\r\n            }\r\n        case 'HEROES_FETCHED':\r\n            return {\r\n                ...state,\r\n                heroes: action.payload,\r\n                heroesLoadingStatus: 'idle'\r\n            }\r\n        case 'HEROES_FETCHING_ERROR':\r\n            return {\r\n                ...state,\r\n                heroesLoadingStatus: 'error'\r\n            }\r\n        default:\r\n           return state;\r\n    }\r\n}\r\n\r\n\r\nexport default reducer;","import {legacy_createStore as createStore} from 'redux';\r\nimport reducer from '../reducers/reducers';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux/es/exports';\n\nimport App from './components/app/App';\nimport store from './store/store';\n\nimport './styles/index.scss';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <Provider store ={store}>\n        <App/>\n    </Provider>\n    \n);\n\n\n"],"sourceRoot":""}